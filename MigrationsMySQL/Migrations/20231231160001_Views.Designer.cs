// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShipbuData;

#nullable disable

namespace MigrationsMySQL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231231160001_Views")]
    partial class Views
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShipbuData.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ShipbuData.TransportOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TransportOrders");
                });

            modelBuilder.Entity("ShipbuData.TransportOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<Guid>("TransportOrderId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TransportOrderId");

                    b.ToTable("TransportOrderItems");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TransportOrderItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ShipbuData.TransportOrderItemContainerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameTr")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("NameTr")
                        .IsUnique();

                    b.ToTable("TransportOrderItemContainerTypes");
                });

            modelBuilder.Entity("ShipbuData.TransportOrderItemFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AttachmentDescriptionEn")
                        .HasColumnType("longtext");

                    b.Property<string>("AttachmentDescriptionTr")
                        .HasColumnType("longtext");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DescriptionTr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NameTr")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NameEn")
                        .IsUnique();

                    b.HasIndex("NameTr")
                        .IsUnique();

                    b.ToTable("TransportOrderItemFeatures");
                });

            modelBuilder.Entity("ShipbuData.TransportOrderItemFeatureValue", b =>
                {
                    b.Property<Guid>("TransportOrderItemFeatureId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TransportOrderItemId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Attachment")
                        .HasColumnType("longtext");

                    b.HasKey("TransportOrderItemFeatureId", "TransportOrderItemId");

                    b.HasIndex("TransportOrderItemId");

                    b.ToTable("TransportOrderItemFeatureValue");
                });

            modelBuilder.Entity("ShipbuData.TransportStaticPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContentTr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LabelEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LabelTr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TransportStaticPages");
                });

            modelBuilder.Entity("ShipbuData.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("RefreshToken")
                        .HasColumnType("char(36)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TransportOrderItemTransportOrderItemFeature", b =>
                {
                    b.Property<Guid>("TransportOrderItemFeaturesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TransportOrderItemsId")
                        .HasColumnType("char(36)");

                    b.HasKey("TransportOrderItemFeaturesId", "TransportOrderItemsId");

                    b.HasIndex("TransportOrderItemsId");

                    b.ToTable("TransportOrderItemTransportOrderItemFeature");
                });

            modelBuilder.Entity("ShipbuData.TransportOrderItemContainer", b =>
                {
                    b.HasBaseType("ShipbuData.TransportOrderItem");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TransportOrderItemContainerTypeId")
                        .HasColumnType("char(36)");

                    b.Property<float>("Weight")
                        .HasColumnType("float");

                    b.HasIndex("TransportOrderItemContainerTypeId");

                    b.HasDiscriminator().HasValue("TransportOrderItemContainer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ShipbuData.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ShipbuData.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ShipbuData.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ShipbuData.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShipbuData.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ShipbuData.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShipbuData.TransportOrder", b =>
                {
                    b.HasOne("ShipbuData.User", "User")
                        .WithMany("TransportOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShipbuData.TransportOrderItem", b =>
                {
                    b.HasOne("ShipbuData.TransportOrder", "TransportOrder")
                        .WithMany("TransportOrderItems")
                        .HasForeignKey("TransportOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportOrder");
                });

            modelBuilder.Entity("ShipbuData.TransportOrderItemFeatureValue", b =>
                {
                    b.HasOne("ShipbuData.TransportOrderItemFeature", "TransportOrderItemFeature")
                        .WithMany("TransportOrderItemFeatureValues")
                        .HasForeignKey("TransportOrderItemFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShipbuData.TransportOrderItem", "TransportOrderItem")
                        .WithMany("TransportOrderItemFeatureValues")
                        .HasForeignKey("TransportOrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportOrderItem");

                    b.Navigation("TransportOrderItemFeature");
                });

            modelBuilder.Entity("TransportOrderItemTransportOrderItemFeature", b =>
                {
                    b.HasOne("ShipbuData.TransportOrderItemFeature", null)
                        .WithMany()
                        .HasForeignKey("TransportOrderItemFeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShipbuData.TransportOrderItem", null)
                        .WithMany()
                        .HasForeignKey("TransportOrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TransportOrderItemTransportOrderItemFeature_TransportOrderI~1");
                });

            modelBuilder.Entity("ShipbuData.TransportOrderItemContainer", b =>
                {
                    b.HasOne("ShipbuData.TransportOrderItemContainerType", "TransportOrderItemContainerType")
                        .WithMany("TransportOrderItemContainers")
                        .HasForeignKey("TransportOrderItemContainerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TransportOrderItemContainerType");
                });

            modelBuilder.Entity("ShipbuData.TransportOrder", b =>
                {
                    b.Navigation("TransportOrderItems");
                });

            modelBuilder.Entity("ShipbuData.TransportOrderItem", b =>
                {
                    b.Navigation("TransportOrderItemFeatureValues");
                });

            modelBuilder.Entity("ShipbuData.TransportOrderItemContainerType", b =>
                {
                    b.Navigation("TransportOrderItemContainers");
                });

            modelBuilder.Entity("ShipbuData.TransportOrderItemFeature", b =>
                {
                    b.Navigation("TransportOrderItemFeatureValues");
                });

            modelBuilder.Entity("ShipbuData.User", b =>
                {
                    b.Navigation("TransportOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
